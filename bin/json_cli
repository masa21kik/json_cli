#!/usr/bin/env ruby
require 'json_cli'
require 'thor'

module JsonCli
  class CLI < Thor
    desc "left_join RIGHT_FILE [LEFT_FILE]", "left outer join of json files"
    option :key, :required => true, :aliases => :k
    def left_join(right_file, left_file = nil)
      left_io = left_file.nil? ? STDIN : File.open(left_file, 'r')
      right_io = File.open(right_file, 'r')
      JsonCli::JoinJson.left_join(left_io, right_io, options[:key])
      left_io.close
      right_io.close
    end

    desc "right_join RIGHT_FILE [LEFT_FILE]", "right outer join of json files"
    option :key, :required => true, :aliases => :k
    def right_join(right_file, left_file = nil)
      left_io = left_file.nil? ? STDIN : File.open(left_file, 'r')
      right_io = File.open(right_file, 'r')
      JsonCli::JoinJson.right_join(left_io, right_io, options[:key])
      left_io.close
      right_io.close
    end

    desc "inner_join RIGHT_FILE [LEFT_FILE]", "inner join of json files"
    option :key, :required => true, :aliases => :k
    def inner_join(right_file, left_file = nil)
      left_io = left_file.nil? ? STDIN : File.open(left_file, 'r')
      right_io = File.open(right_file, 'r')
      JsonCli::JoinJson.inner_join(left_io, right_io, options[:key])
      left_io.close
      right_io.close
    end

    desc "unwind_array [JSON_FILE]", "unwind array of json file"
    option :key, :required => true, :aliases => :k
    def unwind_array(json_file = nil)
      io = json_file.nil? ? STDIN : File.open(json_file, 'r')
      JsonCli::UnwindJson.unwind_array(io, options[:key])
      io.close
    end

    desc "unwind_hash [JSON_FILE]", "unwind hash of json file"
    option :key, :required => true, :aliases => :k
    option :flatten, :type => :boolean, :aliases => :f
    option :key_label
    option :value_label
    def unwind_hash(json_file = nil)
      io = json_file.nil? ? STDIN : File.open(json_file, 'r')
      opt = {}
      options.select{|k,v| k != :key}.each{|k,v| opt[k.to_sym] = v}
      JsonCli::UnwindJson.unwind_hash(io, options[:key], opt)
      io.close
    end
  end
end

JsonCli::CLI.start(ARGV)
